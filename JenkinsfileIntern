@Library('vl-jenkins') _

import no.nav.jenkins.*

def maven = new maven()
def version
def MILJO = "t4"

pipeline {
    agent {
        node {
            label 'DOCKER2'
        }
    }

    options {
        timestamps()
    }

    environment {
        DOCKERREGISTRY = "docker.adeo.no:5000"
        ARTIFACTID = readMavenPom().getArtifactId()
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout scm
                    gitCommitHash = sh(script: "git log -n 1 --pretty=format:'%h'", returnStdout: true)

                    mRevision = maven.revision()
                    Date date = new Date()
                    changelist = "_" + date.format("YYYYMMddHHmmss") + "_" + gitCommitHash

                    version = mRevision + changelist
                    echo "Tag to be deployed $version"
                }
            }

        }
        stage('Maven version') {
            steps {
                sh "mvn --version"
            }
        }

        stage('Build') {
            steps {
                script {
                        configFileProvider(
                                [configFile(fileId: 'navMavenSettings', variable: 'MAVEN_SETTINGS')]) {

                            buildEnvironment = new buildEnvironment()

                            if (maven.javaVersion() != null) {
                                buildEnvironment.overrideJDK(maven.javaVersion())
                            }

                            sh "mvn -B -s $MAVEN_SETTINGS -Dfile.encoding=UTF-8 -DinstallAtEnd=true -DdeployAtEnd=true -Dsha1= -Dchangelist= -Drevision=$version clean install"
                            sh "docker build --pull -t $DOCKERREGISTRY/$ARTIFACTID:$version ."
                            withCredentials([[$class          : 'UsernamePasswordMultiBinding',
                                              credentialsId   : 'nexusUser',
                                              usernameVariable: 'NEXUS_USERNAME',
                                              passwordVariable: 'NEXUS_PASSWORD']]) {
                                sh "docker login -u ${env.NEXUS_USERNAME} -p ${env.NEXUS_PASSWORD} ${DOCKERREGISTRY} && docker push ${DOCKERREGISTRY}/${ARTIFACTID}:${version}"
                            }
                        }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    dir ('k8s') {
                        def props = readProperties  interpolate: true, file: "application.${MILJO}.variabler.properties"
                        def value = "s/RELEASE_VERSION/${version}/g"
                        props.each{ k,v -> value=value+";s%$k%$v%g" }
                        sh "k config use-context $props.CONTEXT_NAME"
                        sh "sed \'$value\' app.yaml | k apply -f -"

                        def naisNamespace
                        if (MILJO == "p") {
                            naisNamespace = "default"
                        } else {
                            naisNamespace = MILJO
                        }
                        def exitCode=sh returnStatus: true, script: "k rollout status -n${naisNamespace} deployment/${ARTIFACTID}"
                        echo "exit code is $exitCode"

                        if(exitCode == 0) {
                            def veraPayload = "{\"environment\": \"${MILJO}\",\"application\": \"${ARTIFACTID}\",\"version\": \"${version}\",\"deployedBy\": \"Jenkins\"}"
                            def response = httpRequest([
                                    url                   : "https://vera.adeo.no/api/v1/deploylog",
                                    consoleLogResponseBody: true,
                                    contentType           : "APPLICATION_JSON",
                                    httpMode              : "POST",
                                    requestBody           : veraPayload,
                                    ignoreSslErrors       : true
                            ])
                        }
                        addBadge icon: '', id: '', link: '', text: "${MILJO}-${version}"
                    }
                }
            }
        }
    }
}
